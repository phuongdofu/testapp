import time, sys, random, json, os, platform, shutil, openpyxl, subprocess
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import WebDriverException
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.alert import Alert
import urllib.parse
from openpyxl import Workbook, load_workbook
from selenium.webdriver.firefox.firefox_binary import FirefoxBinary

current_folder_path = os.path.dirname(os.path.realpath(__file__))

'''if "TestFolder" in current_folder_path:
    current_folder_path = current_folder_path.replace("AutoTest-CheckLogInDownloads\\", "")
    myfolder = True
else:
    myfolder = False'''

system_name = str(platform.system())
if system_name == "Windows":
    programs_path = "C:\\Program Files\\Mozilla Firefox\\"
    sign = "\\"
    user_repository = current_folder_path.split("AppData")[0]
else:
    programs_path = "/usr/bin/"
    sign = "/"
    user_repository = current_folder_path.replace("AutoTest-CheckLogIn", "")

'''if system_name == "Windows" and myfolder == False:
    config_files = ["chromedriver.exe", "geckodriver.exe", "functions.py"]
    for config_file in config_files:
        source_path = user_repository + "AutoTest-CheckLogIn" + sign + config_file
        destination_path = current_folder_path + sign + config_file
        shutil.copy(source_path, destination_path)

    folder_source_path = user_repository + sign + "AutoTest-CheckLogIn" + sign + "Attachment"
    folder_destination_path = current_folder_path + sign + "Attachment"
    shutil.copytree(folder_sourcepath, folder_destination_path)'''

now = datetime.now()
year = now.strftime("%Y")
month = now.strftime("%m")
day = now.strftime("%d")
date_time = now.strftime("%Y/%m/%d, %H:%M:%S")
testcase_fail = '\033[91m' + "Test case status: fail" + '\033[0m'
testcase_pass = '\033[92m' + "Test case status: pass" + '\033[0m'
hanbiro_content = "test is run at " + date_time
date_id = date_time.replace("/", "").replace(", ", "").replace(":", "")[2:]
hanbiro_title = "generated by selenium python at " + date_time
attachment_folder = current_folder_path + sign + "Attachment" + sign
attached_file = attachment_folder + sign + "attach-file.xlsx"
attached_image = attachment_folder + sign + "hanbiro-viet-nam-logo.jpg"
expense_file = attachment_folder + sign + "Expense-SeleniumPython.xls"
import_file = attachment_folder + sign + "Organization-SeleniumPython.xls"

test_file_destination_path = current_folder_path + sign + "functions.py"
result_log = attachment_folder + sign + "result_log.txt"
fail_log = attachment_folder + sign + "fail_log.txt" 
execution_log = attachment_folder + sign + "execution_log.txt"
report_log = attachment_folder + sign + "Login Report Log.xlsx"

if system_name == "Windows":
    chromedriver_file = current_folder_path + sign + "chromedriver.exe"
    gecko_file = current_folder_path + sign + "geckodriver.exe"
    firefox_binary = FirefoxBinary(programs_path + "firefox.exe")
else:
    chromedriver_file = current_folder_path + sign + "chromedriver"
    gecko_file = current_folder_path + sign + "geckodriver"
    firefox_binary = FirefoxBinary(programs_path + "firefox")

def CreateReportLogSample():
    wb = openpyxl.load_workbook(report_log)

    global current_column
    test_time = datetime.now().strftime("%Y/%m/%d, %H:%M:%S")

    current_sheet = wb.active
    current_column = int(current_sheet.max_column) + 1
    current_sheet.cell(row=1, column=current_column).value = "Date: " + str(test_time)

    wb.save(report_log)

def WriteReportLog(domain, login_status, login_duration):
    wb = openpyxl.load_workbook(report_log)
    current_sheet = wb.active
    last_row = int(current_sheet.max_row) + 1

    row=0
    for row in range(1, last_row):
        row += 1
        cell_value = current_sheet.cell(row=row, column=1).value
        if cell_value == domain:
            current_row = row
            break
        else:
            current_row = last_row

    current_sheet.cell(row=current_row, column=1).value = domain
    current_sheet.cell(row=current_row, column=2).value = login_status
    current_sheet.cell(row=current_row, column=current_column).value = login_duration

    wb.save(report_log)

def StartWebdriver():
    global driver
    args = ["hide_console"]
    
    driver = webdriver.Chrome(chromedriver_file, service_args=args)
    driver.maximize_window()
    
    driver.get("https://search.hanbiro.com/")
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//font[@color='white']")))
    global pw_submit

    pw_submit = str(driver.find_element_by_xpath("//font[@color='white']").text)

    return driver

def CreateFailLog():
    # Read the log file and record the log (debug log)
    open_execution_log = open(execution_log, "r")
    execution_log_lines_list = list(open_execution_log.read().split("b'"))
    
    # Use last line to check where it fails
    last_line = execution_log_lines_list[-1]
    open_execution_log.close()

    # Record fail test case
    open_result_log = open(result_log, "r")
    result_log_lines_list = list(open_result_log.read().split("b'"))
    fail_list = []
    for fail_tc in result_log_lines_list:
        if "[Fail]" in fail_tc:
            fail_list.append(fail_tc)
    open_result_log.close()

    # Write fail log and fail test case in fail log fole
    open_fail_log = open(fail_log, "a")
    fail_log_content = "\n" + date_time + "\n[PREVIOUS FAIL LOG]" + last_line + "\n"
    open_fail_log.write(fail_log_content)
    for fail_log_item in fail_list:
        open_fail_log.write(fail_log_item +"\n")
    open_fail_log.close()

def Logging(msg):
    '''
        This function is to be used for output
        print output and record data in txt file
    '''
    print(msg)

    # Open txt file to record the execution log (test steps - test logs)
    log_msg = open(execution_log, "a")
    written_msg = str(msg).encode(encoding="ascii",errors="ignore")
    logged_msg = str(written_msg) + "\n"
    log_msg.write(logged_msg)
    log_msg.close()

def Logging_Result(msg):
    '''
        This function is to be used for result of test cases (pass/fail)
        print result and record data in txt file
    '''
    print(msg)
    log_msg = open(result_log, "a")
    written_msg = str(msg).encode(encoding="ascii",errors="ignore")
    logged_msg = str(written_msg) + "\n"
    log_msg.write(logged_msg)
    log_msg.close()

def WaitUntilPageIsLoaded(page_xpath):
    '''
        This function is to be used for handling web loading
        Define a specific element at the destination page and wait until it appears
        to verify the page is navigated successfully
    '''

    # Wait until the seleced element of the navigated page appears
    if bool(page_xpath) == True:
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, page_xpath)))
    
    # Wait until the loading icon disappear from the UI (defined along with xpath)
    try:
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//div[@class='loading-dialog hide']")))
    except WebDriverException:
        pass

def FindPushNoti():
    '''
        Count how many push notification and close them
        (this function is to be used in function of creating new item 
                            as push notification can cover the write button)
    '''
    try:
        push_no = int(len(driver.find_elements_by_css_selector(".ui-pnotify-closer > .fa"))) + 1
        for i in range (1, push_no):
            driver.find_element_by_css_selector(".ui-pnotify-closer > .fa").click()
            Logging("Write - Close push notification " + str(i))
    except WebDriverException:
        pass

def ValidateTimecard():
    '''
        Confirm working time from HR system 
        (this function is to be used for preventing the punch modal from displaying when navigating to new page
                                        as the punch modal can cover the write button)
    '''
    clock_button = driver.find_element_by_xpath("//div[@id='timecard']/div/div/div[2]/div/button")
    if "Clock In" in clock_button.text:
        WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.XPATH, "//button[contains(., 'Clock In')]"))).click()
        Logging("Clock In timecard")

        try:
            WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.XPATH, "//button[contains(., 'Cancel') and contains(@ng-click, 'timecard')]"))).click()
            Logging("Cancel late modal")
        except WebDriverException:
            pass
        
        WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.XPATH, "//button[contains(., 'Clock Out')]"))).click()
        Logging("Clock Out timecard")
        
        try:
            WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.XPATH, "//button[contains(., 'Cancel') and contains(@ng-click, 'timecard')]"))).click()
            Logging("Cancel Leave Early")
        except WebDriverException:
            pass
        
        Logging(testcase_pass)
    elif "Clock Out" in clock_button.text:
        WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.XPATH, "//button[contains(., 'Clock Out')]"))).click()
        Logging("Clock Out timecard")
        
        try:
            WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.XPATH, "//button[contains(., 'Cancel') and contains(@ng-click, 'timecard')]"))).click()
            Logging("Cancel Leave Early")
        except WebDriverException:
            pass
        
        Logging(testcase_pass)
    elif "Continue Work" in clock_button.text:
        Logging("User already punched in/out")

        time.sleep(2)
        
        driver.find_element_by_xpath("//button[@data-ng-click='timecard.continueWork(false)']").click()
        Logging("Click Continue Work")

        WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.XPATH, "//button[contains(., 'Clock Out')]")))
        driver.find_element_by_xpath("//button[contains(., 'Clock Out')]").click()
        Logging("Click Clock out button")
        
        WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.XPATH, "//button[@ng-click='timecard.clockOutHandlerAgain($event)']")))
        driver.find_element_by_xpath("//button[@ng-click='timecard.clockOutHandlerAgain($event)']").click()
        Logging("Click confirm clock out button")

        try:
            WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.XPATH, "//button[contains(., 'Cancel') and contains(@ng-click, 'timecard.confirmClockOutEarly = false')]")))
            driver.find_element_by_xpath("//button[contains(., 'Cancel') and contains(@ng-click, 'timecard.confirmClockOutEarly = false')]").click()
            Logging("Cancel Leave Early")
        except WebDriverException:
            pass
        
        WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.XPATH, "//button[@data-ng-click='timecard.continueWork(false)']")))
        Logging("Wait for Continue Work button to be visible")
        Logging(testcase_pass)

def ValidateTimecardInSidebar():
    '''
        Click clock in button in the right side to confirm working time in hr system
    '''

    driver.find_element_by_xpath("//a[contains(@class, 'open-sidebar')]").click()
    Logging("Open Right Sidebar")

    try:
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//div[@data-ng-include='templateTimecardPath']")))
        Logging("Wait until timecard modal is visible")

        try:
            WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//div[@id='timecard']/div/div/div[2]/div/button")))
            Logging("Wait until clock in/out is visible")
            
            time.sleep(1)

            ValidateTimecard()
        except WebDriverException:
            driver.find_element_by_xpath("//div[@ng-if='timecard.serviceExcepted()']")
            Logging("Current user is timecard excepted user")
    except WebDriverException:
        Logging("Cannot find user timecard information")

def UserLogIn(domain_name, userid, userpw):
    Logging('\033[93m' + "-------------------------------------------" + '\033[0m')
    Logging('\033[93m' + "[TEST CASE] User LogIn" + '\033[0m')

    login_start_time = time.time()

    try:
        # Wait until page is loaded
        WebDriverWait(driver, 30).until(EC.presence_of_element_located((By.ID, "iframeLoginPassword")))
        login = True
    except WebDriverException:
        login = False
        
    if login == True:
        login_status = None

        # Input user id to log in with key 'userid'
        input_id = driver.find_element_by_xpath("//input[@id='log-userid']")
        input_id.send_keys(userid)
        if input_id.get_attribute("value") != userid:
            input_id.clear()
            input_id.send_keys(userid)
        Logging("Log in - Input valid ID")

        # Switch to password frame and input password with key 'userpw'
        frame_element = driver.find_element_by_id("iframeLoginPassword")
        driver.switch_to.frame(frame_element)
        input_pw = driver.find_element_by_id("p")
        input_pw.send_keys(userpw)
        if input_pw.get_attribute("value") != userpw:
            input_pw.clear()
            input_pw.send_keys(userpw)
        driver.switch_to.default_content()
        Logging("Log in - Input valid password")

        # Confirm login data by pressing ENTER key from the keyboard
        driver.find_element_by_id("btn-log").send_keys(Keys.RETURN)
        Logging("Log in - Click Submit button")

        #login_status = None

        # Define login result and check if login data was input correctly
        try:
            WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'alert-warning')]")))
            Logging_Result("Fail to log in")

            login_status = False
            # >>>>> If the alert appears, it means the login data is incorrect
        except WebDriverException:
            Logging_Result("Log in successfully")

            login_status = True

        if userid != "postmaster" and login_status == True:
            # Define if it is navigated to the HOME PAGE after log in successfully
            try:
                WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.XPATH, "//span[@class='infobox-text']")))
            except WebDriverException:
                Logging("Fail to access Groupware after log in")
                login_status = False
    else:
        login_status = None

    if bool(login_status) == True:
        login_status_value = "Pass"
    else:
        login_status_value = "Fail"
    
    login_end_time = time.time()
    duration = login_end_time - login_start_time
    login_duration = str(duration)[0:4]
    
    WriteReportLog(domain_name, login_status_value, login_duration)


def OldGW_UserLogIn(domain_name,userid, userpw):
    '''
        Verify test case login if old groupware version is being used
    '''
    login_start_time = time.time()

    WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.NAME, "hmail_id")))

    user_data = {
        "id": {
            "value": userid,
            "xpath": "//input[@name='hmail_id']"
        },
        "pw": {
            "value": userpw,
            "xpath": "//input[@name='hmail_pass']"
        }
    }

    for login_data in user_data.keys():
        xpath = user_data["" + login_data + ""]["xpath"]
        value = user_data["" + login_data + ""]["value"]
        input = driver.find_element_by_xpath(xpath)
        input.send_keys(value)
        if input.get_attribute("value") != value:
            input.clear()
            input.send_keys(value)
        Logging("Log in - Input " + str(value))

    try:
        driver.find_element_by_xpath("//div[@class='dialog-button']/a[2]/span/span").click()
        time.sleep(1)
    except WebDriverException:
        pass

    driver.find_element_by_xpath("//td[@class='login']").click()
    Logging("Log in - Click SIgn in button")
    
    login_status = None

    try:
        WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.XPATH, "//td[@style='font-size:10pt;color:red;text-align:center;']")))
        #login_alert = str(driver.find_element_by_xpath("//td[@style='font-size:10pt;color:red;text-align:center;']").text)
        Logging("---> Fail to log in")
        login_status = False
    except WebDriverException:
        #login_alert = None
        Logging("---> Log in successfully")
        login_status = True

    #time.sleep(1)                                     #debug old gw
    #driver.get("http://qa.hanbiro.net/groupware")     #debug old gw
    #time.sleep(2)                                     #debug old gw

    if login_status == True:
        try:
            WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//frame[@name='main1']")))
            page_frame = driver.find_element_by_xpath("//frame[@name='main1']")
            driver.switch_to.frame(page_frame)
            WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.XPATH, "//*[@id='main']")))

            driver.switch_to.default_content()
            time.sleep(1)
            Logging("---> Access Groupware successfully after log in ")
        except WebDriverException:
            Logging("---> Fail to access Groupware after log in ")
            login_status = False

    if login_status == True:
        login_status_value = "Pass"
    else:
        login_status_value = "Fail"

    login_end_time = time.time()
    login_duration = login_end_time - login_start_time

    WriteReportLog(domain_name, login_status_value, login_duration)
    
def RunBasicTest(domain_name, userid, userpw):
    http = "http://"
    new_gw = "/ngw/app/#"
    old_gw = "/groupware"
    domain_full = http + domain_name + new_gw
    old_domain = http + domain_name + old_gw
    navigated_url = http + domain_name
    urllib.parse.quote(old_gw)

    urllib.parse.quote(new_gw)
    urllib.parse.quote(http)

    # Navigate to domain
    driver.get(navigated_url)

    time.sleep(2)
    # Define version of groupware by url (old version/new version)
    # Run Login test case after version is verified
    current_url = str(driver.current_url)
    if str(old_domain) in current_url:
        login_data = OldGW_UserLogIn(domain_name, userid, userpw)
    else: 
        login_data = UserLogIn(domain_name, userid, userpw)

def ValidateExecutionData(domain_submit, id_submit, pw_submit):
    ''' Select type of test and check if the test execution is run successfully '''
    
    ''' DEBUG '''
    RunBasicTest(domain_submit, id_submit, pw_submit)
    execution_status = True

    return execution_status

def ValidateExecutionFields(domain_submit, id_submit, pw_submit):
    tooltips = [
        "Domain name",
        "User id for login",
        "User pw for login"
    ]

    required_fields = [domain_submit, id_submit, pw_submit]
    enable_run = []

    for required_field in required_fields:
        if required_field in tooltips:
            # => If field input value == tooltip text
            # => field value is empty (user did not fill in)
            enable_run.append(False)
            warning_msg = "Required fields (*) cannot be empty"
        else:
            if "," in domain_submit:
                import_duplicate = []
                for import_data in required_fields:
                    import_duplicate.append(len(import_data))
                
                import_duplicate = list(dict.fromkeys(import_duplicate))
                
                if len(import_duplicate) < 4:
                    enable_run.append(True)
                else:
                    enable_run.append(False)
                    warning_msg = "Please check the import data"
            else:
                enable_run.append(True)
    
    if False not in enable_run:
        execution_status = ValidateExecutionData(domain_submit, id_submit, pw_submit)
    else:
        execution_status = None

    return execution_status

def RunImportExecution():
    # Create report log
    CreateReportLogSample()

    # open browser
    driver = StartWebdriver()

    # Clear and create execution log / result file
    open_execution_log = open(execution_log, "w")
    open_execution_log.close()

    open_result_log = open(result_log, "w")
    open_result_log.close()
    
    wb = openpyxl.load_workbook(report_log)
    current_sheet = wb.active
    last_row = int(current_sheet.max_row) + 1

    domain_submit = ""
    row=1
    for row in range(1, last_row-1):
        row += 1
        cell_value = str(current_sheet.cell(row=row, column=1).value)
        if row == 2:
            domain_submit = domain_submit + cell_value
        else:
            domain_submit = domain_submit + "," + cell_value

    id_submit = "hanbiro"
    '''
        Verify if multiple domains are input
            -> Run multiple tests is multiple domains are input
    '''
    execution_status_list = []
    if "," in domain_submit:
        # User run multiple test data splitted by ","
        domain_submit_list = list(domain_submit.split(","))

        # Testing loop
        for list_ele in domain_submit_list:
            i = domain_submit_list.index(list_ele)
            domain_submit = domain_submit_list[i]
            execution_status = ValidateExecutionFields(domain_submit, id_submit, pw_submit)
            if execution_status != None:
                execution_status_list.append(execution_status)
            open(execution_log, "w")
            time.sleep(1)
    else:
        # Run single test
        execution_status = ValidateExecutionFields(domain_submit, id_submit, pw_submit)
        if execution_status != None:
            execution_status_list.append(execution_status)
    
    driver.quit()

i=0
while i <= 0:
    RunImportExecution()
    time.sleep(3600)