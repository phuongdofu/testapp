import time, sys, unittest, random, json, requests, openpyxl, testlink
from datetime import datetime
from selenium import webdriver
from random import randint
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import TimeoutException, WebDriverException, NoSuchElementException
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.chrome.options import Options
from common_functions import *

chrome_options = Options()
chrome_options.add_argument("--start-maximized")

now = datetime.now()
year = now.strftime("%Y")
month = now.strftime("%m")
day = now.strftime("%d")
time1 = now.strftime("%H:%M:%S")
date_time = now.strftime("%Y/%m/%d, %H:%M:%S")

#local_path = os.path.dirname(os.path.realpath(__file__))

# Declare variables
testcase_fail = bcolors.FAIL + ">>> Test case status: fail" + bcolors.ENDC
testcase_pass = bcolors.OKGREEN + ">>> Test case status: pass" + bcolors.ENDC

hanbiro_postmaster_id = "postmaster"
#hanbiro_postmaster_password = "$Bhngk6@"
hanbiro_title = "Generated by Selenium Python at " + date_time
title_edit = "Title is updated at " + date_time
content_edit = "Content is updated at " + date_time
hanbiro_content = "Content is written at " + date_time
import_file = Files.local_path + "%sAttachment%sOrganization-SeleniumPython.xls" % (slash, slash)

# start web browser
driver = Driver.DefineDriver("web")
driver.maximize_window()

# check time
start_time = time.time()

# Set up for TstLink Integration with Selenium Webdriver
TESTLINK_API_PYTHON_SERVER_URL= 'http://qa1.hanbiro.net/testlink/lib/api/xmlrpc/v1/xmlrpc.php'
TESTLINK_API_PYTHON_DEVKEY= '9cd934c03fa48b7c7d29a631af9a819f'

tls = testlink.TestLinkHelper(TESTLINK_API_PYTHON_SERVER_URL, TESTLINK_API_PYTHON_DEVKEY).connect(testlink.TestlinkAPIClient)

def TestLinkResult_Pass(external_id):
    tls.reportTCResult(testcaseexternalid=external_id, testplanid=data["testlink"]["testplan_id"], buildname=data["testlink"]["build_name"], status='p', notes='Test Case [' + external_id + '] passed')

def TestLinkResult_Fail(external_id):
    tls.reportTCResult(testcaseexternalid=external_id, testplanid=data["testlink"]["testplan_id"], buildname=data["testlink"]["build_name"], status='f', notes='Test Case [' + external_id + '] passed')

def PostmasterLogIn(domain_name, postmaster_password):
    PrintYellow("-------------------------------------------")
    PrintYellow("[TEST CASE] POSTMASTER LOG IN")

    driver.get(domain_name + "/ngw/app/#/sign")
    Logging("Log in - Access login page")
    Waits.Wait10s_ElementLoaded("//*[@id='iframeLoginPassword']")
    time.sleep(1)

    input_id = Commands.InputElement("//input[@id='log-userid']", hanbiro_postmaster_id)
    if input_id.get_attribute("value") != hanbiro_postmaster_id:
        Commands.InputElement("//input[@id='log-userid']", hanbiro_postmaster_id)
    Logging("Log in - Input valid ID")
    
    time.sleep(1)
    Waits.Wait10s_ElementLoaded("//*[@id='iframeLoginPassword']")
    Commands.SwitchToFrame("//*[@id='iframeLoginPassword']")
    
    input_pw = Commands.InputElement("//*[@id='p']",postmaster_password)
    if input_pw.get_attribute("value") != postmaster_password:
        Commands.InputElement("//*[@id='p']",postmaster_password)
    Logging("Log in - Input valid password")
    
    Commands.SwitchToDefaultContent()
    
    login = Commands.FindElement("//*[@id='btn-log']")
    login.send_keys(Keys.RETURN)
    Logging("Log in - Click Submit button")

    login_status = []

    try:
        Waits.WaitElementLoaded(5, "//div[contains(@class, 'alert-warning')]")
        print("Fail to log in" + testcase_fail)
        login_status.append(False)
    except WebDriverException:
        print("Log in successfully")
        print("Log in successfully" + testcase_pass)
        login_status.append(True)

    #print(login_status[0])
    if login_status[0] == True:
        try:
            Waits.WaitElementLoaded(30, "//*[@class='navbar-brand']")
            Waits.WaitUntilPageIsLoaded(None)
        except WebDriverException:
            print("Fail to access Groupware after log in")
            login_status[0] = False
    
    return login_status

def Postmaster_InspectPage():
    PrintYellow("[TEST CASE] INSPECT PAGE")

    Waits.WaitElementLoaded(20, "//*[@id='frame1']")
    Commands.SwitchToFrame("//*[@id='frame1']")
    
    Waits.WaitElementLoaded(20, "//a[@class='article-title']")
    Logging("The execution is ready")
    
    Commands.SwitchToDefaultContent()
    
    time.sleep(1)

def Postmaster_AccessOrgnizationMenu():
    current_url = DefineCurrentURL()
    if "/user/list" not in current_url:
        Commands.ClickElement("//a[@ui-sref='admin.user.set-user']")
        Logging("Access Organization menu")

        Waits.Wait10s_ElementLoaded("//div[contains(@class, 'message-footer')]/div[contains(@class, 'pull-left')]")
        time.sleep(1)

def Organization_CreateDept():
    PrintYellow("[TEST CASE] POSTMASTER - CREATE DEPT")

    Logging("--- start executing test case - add new department ---")
    
    Waits.Wait10s_ElementLoaded(data["postmaster"]["menu"])
    Commands.ClickElement(data["postmaster"]["menu"])
    Logging("1. Access Organization menu")

    org_plus = Waits.Wait10s_ElementLoaded(data["postmaster"]["org_plus"])
    driver.execute_script("window.scrollTo(0,-118)")
    org_plus.click()
    Logging("2. Click plus button from Org tree")

    Commands.Wait10s_ClickElement(data["postmaster"]["add_dept"])
    Logging("3. Select Add Dept")

    x = str(random.randint(1, 10000))
    dept_name = "Deparment" + x
    Commands.Wait10s_InputElement(data["postmaster"]["dept_name"], dept_name)
    Logging("4. Input department name")

    time.sleep(1)

    Commands.ClickElement("//button[contains(.,'Save')]")
    Logging("5. Click Save button")

    Waits.WaitElementLoaded(5, data["postmaster"]["loading"])
    Waits.Wait10s_ElementInvisibility(data["postmaster"]["loading"])
    Waits.WaitElementLoaded(5, data["postmaster"]["end_dept"])

    time.sleep(1)

    last_dept = Functions.GetElementText(data["postmaster"]["end_dept"])
    Logging("last_dept:", last_dept)
    if last_dept == dept_name:
        TestCase_LogResult(**data["testcase_result"]["postmaster"]["add_dept"]["pass"])
    else:
        TestCase_LogResult(**data["testcase_result"]["postmaster"]["add_dept"]["fail"])

def Organization_CreateUser():
    PrintYellow("[TEST CASE] POSTMASTER - CREATE USER")

    Commands.Wait10s_ClickElement(data["postmaster"]["end_dept"])
    Logging("2. Click on the last department from organization list")

    time.sleep(1)
    
    Commands.Wait10s_ClickElement(data["postmaster"]["org_plus"])
    Logging("3. Click plus button from organization modal")

    Commands.Wait10s_ClickElement(data["postmaster"]["add_user"])
    Logging("4. Select Add User")

    y = str(random.randint(1, 1000000000))
    Waits.Wait10s_ElementLoaded(5, data["postmaster"]["user_id"])
    user_id = Commands.InputElement(data["postmaster"]["user_id"], "user" + y)
    Logging("5. Input user id")

    Commands.ClickElement(data["postmaster"]["check_id"])
    Logging("Click check id button")
    try:
        check_id_alert = Functions.GetElementText(data["postmaster"]["check_alert"])
        if check_id_alert == "Please enter a login ID":
            Logging(">>> Fail to input user id")
            sys.exit(1)
        elif check_id_alert == "A user already exists with the same name.": 
            Logging(">>> ID is already existed")
        elif check_id_alert == "Available":
            Logging(">>> ID value is valid")
    except WebDriverException:
        Logging(">>> User ID is not checked")
    
    Commands.InputElement(data["postmaster"]["input_pw"], user_id.get_attribute('value') + "1!!!")
    Logging("6. Input user password")

    time.sleep(1)

    user_name = "User " + y
    Commands.InputElement(data["postmaster"]["user_name"], str(user_name))
    
    Commands.ClickElement("//button[contains(.,' Save')]")
    Logging("9. Click Save button")
    
    try:
        Waits.Wait10s_ElementLoaded(data["postmaster"]["success_h4"])
        Logging("New user is created successfully")
        Commands.ClickElement(data["postmaster"]["close_success"])
        TestLinkResult_Pass("WUI-61")
    except WebDriverException:
        ValidateFailResultAndSystem("Test case status: fail")
        TestLinkResult_Fail("WUI-61")
    
    driver.refresh()
    Commands.Wait10s_ClickElement(data["postmaster"]["end_dept"])

    Commands.Wait10s_ClickElement(data["postmaster"]["end_user"])
    new_user = Functions.GetElementText(data["postmaster"]["end_user"]).strip()
    if new_user == str(user_name):
        TestCase_LogResult(**data["testcase_result"]["postmaster"]["add_user"]["pass"])
        time.sleep(1)
        Organization_Delete()
    else:
        TestCase_LogResult(**data["testcase_result"]["postmaster"]["add_user"]["fail"])

def Organization_ImportUser():
    PrintYellow("[TEST CASE] POSTMASTER - IMPORT USER")

    Commands.ClickElement(data["postmaster"]["menu"])
    Logging("1. Access Organization menu")
    
    Commands.ClickElement("//a/span[contains(.,'Organization')]")
    
    excel = Waits.Wait10s_ElementLoaded(data["postmaster"]["excel_button"])
    driver.execute_script("window.scrollTo(0,-118)")
    excel.click()

    driver.find_element_by_link_text("Import").click()

    # store the object of Workbook class in a variable
    wrkbk = openpyxl.Workbook()
    # to create a new sheet
    sh = wrkbk.create_sheet("Details", 2)

    user_id = str(random.randint(1, 1000))

    # to set the value in row 2 and column 3
    sh.cell(row=1, column=1).value = "Dept."
    sh.cell(row=1, column=2).value = "ID"
    sh.cell(row=1, column=3).value = "Name"
    sh.cell(row=2, column=1).value = "Import Folder"
    sh.cell(row=2, column=2).value = "user_import" + user_id
    sh.cell(row=2, column=3).value = "User Import " + user_id

    wrkbk.sheetnames
    removed_sheet = wrkbk['Sheet']('Sheet')
    wrkbk.remove(removed_sheet)
    wrkbk.sheetnames

    # to save the workbook
    wrkbk.save(import_file)
    
    Commands.Wait10s_InputElement("//*[@id='file']", import_file)
    Waits.Wait10s_ElementLoaded("//*[@id='importTable']")
    Commands.ClickElement(data["postmaster"]["save_import"])
    
    try:
        Waits.Wait10s_ElementLoaded(data["postmaster"]["progress_title"])
        Waits.Wait10s_ElementLoaded(data["postmaster"]["progress_percent"])
        time.sleep(1)
        driver.find_element_by_xpath(data["postmaster"]["success_modal"])
        TestCase_LogResult(**data["testcase_result"]["postmaster"]["import_user"]["pass"])
    except WebDriverException:
        TestCase_LogResult(**data["testcase_result"]["postmaster"]["import_user"]["fail"])
    finally:
        Commands.ClickElement(data["postmaster"]["close_confirm"])
        Waits.Wait10s_ElementLoaded(data["postmaster"]["dept_org"])
        time.sleep(1)
        Organization_Delete()

def Organization_Delete():
    PrintYellow("[TEST CASE] POSTMASTER - DELETE USER")

    Commands.ClickElement("//a/span[contains(.,'Organization')]")

    last_dept = Commands.Wait10s_ClickElement("//div[@id='dept_org']/ul/li[@class='dynatree-lastsib']")
    Logging("Organization Delete - Click last dept")
    Logging("--- Last dept name:", last_dept.text)
    Commands.Wait10s_ClickElement("//div[@id='dept_org']/ul/li[@class='dynatree-lastsib']/ul/li/span/a")
    Logging("Select last user in org tree")

    Commands.Wait10s_ClickElement(data["postmaster"]["delete_user"])
    Logging("Click Delete button")
    
    Commands.Wait10s_ClickElement(data["postmaster"]["delete_confirm"])
    Logging("Click Delete confirm")

    Commands.Wait10s_ClickElement(data["postmaster"]["close_success"])
    Logging("Click confirm delete")

    Waits.Wait10s_ElementLoaded("//div[@id='dept_org']/ul/li[@class='dynatree-lastsib']")
    last_dept.click()
    Logging("Click last department")

    Commands.Wait10s_ClickElement("//form[@id='boot-strap-valid']/div/div[2]/div[2]/button[2]")
    Logging("Click button delete from Department module")

    Commands.Wait10s_ClickElement(data["postmaster"]["delete_confirm"])
    Logging("Click Delete confirm")

    Commands.Wait10s_ClickElement(data["postmaster"]["close_success"])
    Logging("Click confirm delete")

    Waits.Wait10s_ElementLoaded(data["postmaster"]["dept_org"])

def RegisterNewUser(domain_name):
    PrintYellow("[TEST CASE] REGISTER NEW USER")

    driver.get(domain_name + "/ngw/app/#/sign")

    Waits.Wait10s_ElementLoaded(data["postmaster"]["userid_name"])

    driver.find_element_by_id("btn-reg").click()

    y = str(random.randint(1, 1000000000))
    user_id = Commands.Wait10s_InputElement(data["postmaster"]["username_id"], "user" + y)
    Logging("Input user id for registration")

    Commands.ClickElement("//button[contains(@ng-click, 'checkId()')]")
    Logging("Click check id button")

    try:
        WebDriverWait(driver, 3).until(EC.presence_of_element_located((By.CSS_SELECTOR, ".fa-check-circle")))
        Logging("Register User - User ID is available")
    except WebDriverException:
        Waits.WaitElementLoaded(3, data["postmaster"]["unavailable_id"])
        Logging("Resgiter User - User is unavailable")

        Commands.ClickElement("//button[contains(@ng-click, 'cancel(false)')]")
        Logging("Register User - Close warning")

        Waits.Wait10s_ElementLoaded(data["postmaster"]["username_id"])

        user_id.clear()
        time.sleep(1)
        user_id.send_keys("user1" + y)

    userid = user_id.get_attribute("value")
    Logging("New User: " + userid)    

    pw = driver.find_element_by_id("password")
    pw.send_keys(userid + "1!")

    confirm_pw = driver.find_element_by_id("confirm_password")
    confirm_pw.send_keys(userid + "1!")

    if pw.get_attribute("value") != confirm_pw.get_attribute("value"):
        pw.clear()
        time.sleep(1)
        pw.send_keys(userid + "1!")

        confirm_pw.clear()
        time.sleep(1)
        confirm_pw.send_keys(userid + "1!")
    
    Logging("Register User - Input password")
        
    driver.find_element_by_id("username").send_keys(userid)
    Logging("Register User - Input user name")

    dept = driver.find_element_by_id("select-open-org-tree")
    dept.click()
    Waits.Wait10s_ElementLoaded("//ul/li[1]/span/a").click()
    Logging("Select dept for new user")

    Commands.ClickElement("//button[contains(.,'Select')]")
    Logging("Confirm selected dept")

    driver.find_element_by_id("btn-reg-confirm").click()

    try:
        Waits.Wait10s_ElementLoaded("//div[contains(., 'Registered successfully.')]")
        TestCase_LogResult(**data["testcase_result"]["postmaster"]["register_user"]["pass"])
    except WebDriverException:
        TestCase_LogResult(**data["testcase_result"]["postmaster"]["register_user"]["fail"])
    
    driver.find_element_by_xpath("//button[contains(@ng-click, 'cancel(false)')]")
    PrintYellow("phuongdofutest")

    Waits.Wait10s_ElementLoaded(data["postmaster"]["userid_name"])

    return userid

def Postmaster_ApproveUser(userid):
    Commands.ClickElement(data["postmaster"]["menu"])
    Logging("Access Organization menu")

    Commands.Wait10s_ClickElement("//a[contains(@href, '#/organize/application')]")
    Logging("Access Applicant List sub menu")

    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.LINK_TEXT, userid))).click()
    Logging("Applicant List - Click to view new user")

    Waits.Wait10s_ElementLoaded(data["postmaster"]["username_id"])

    Commands.ClickElement("//button[contains(@ng-click, 'approve()')]")
    Logging("Applicant List - Click to approve new user")

    try:
        Waits.Wait10s_ElementLoaded("//div[@class='table-responsive']")
        Logging("Approve User - New User is approved")
        Logging(testcase_pass)
    except WebDriverException:
        ValidateFailResultAndSystem("Approve User - Fail to approve user")

def Postmaster_DeleteUser(userid):
    Commands.ClickElement("//a[contains(@href, '#/user/set-user/user/')]")
    Logging("Access Organization tree")

    Waits.Wait10s_ElementLoaded("//div[@id='dept_org']/ul/li[@class='dynatree-lastsib']")

    search_input = Commands.InputElement("//div[@id='main-container']/div[2]/div/div/div[2]/div/div/div/div[2]/div/tree-user/div/input", userid)
    time.sleep(1)
    search_input.send_keys(Keys.ENTER)
    Logging("Search user")

    Commands.Wait10s_ClickElement("//a[contains(text(), '%s')]" % userid)
    Logging("Click user")

    Commands.Wait10s_ClickElement("//button[contains(@ng-click, 'deleteUser()')]")
    Logging("Delete user")
    
    Commands.Wait10s_ClickElement("//button[contains(@data-ng-click, 'ok()') and contains(., 'Delete')]")
    Logging("Confirm Delete")

    Commands.Wait10s_ClickElement("//button[contains(@data-ng-click, 'cancel(false)')]")
    Logging("Close modal")

    Waits.Wait10s_ElementLoaded("//div[@id='main-container']/div[2]/div/div/div[2]/div/div/div/div[2]/div/tree-user/div/input")

    search_input.clear()
    search_input.send_keys(Keys.ENTER)

    Waits.Wait10s_ElementLoaded("//div[@id='dept_org']/ul/li[@class='dynatree-lastsib']")

def PostmasterExecution(domain_name, postmaster_password):
    postmaster = {}
    try:
        userid = RegisterNewUser(domain_name)
        postmaster["postma"] = True
    except:
        userid = None
        postmaster["postma"] = True

    try:    
        login_status = PostmasterLogIn(domain_name, postmaster_password)
        postmaster["postmaster log in"] = True
    except:
        login_status = None
        postmaster["postmaster log in"] = False
    
    if bool(login_status) == True:
        Postmaster_InspectPage()
        
        if bool(userid) == True:
            try:
                Postmaster_ApproveUser(userid)
                Postmaster_DeleteUser(userid)
                postmaster["postmaster approve new user"] = True
            except:
                postmaster["postmaster approve new user"] = False
        try:
            Organization_CreateDept()
            Organization_CreateUser()
            postmaster["postmaster add new dept/user"] = True
        except:
            postmaster["postmaster add new dept/user"] = False
        
        try:
            Organization_ImportUser()
            postmaster["postmaster import user"] = True
        except:
            postmaster["postmaster import user"] = False

def PostmasterExecution_Debug(domain_name, postmaster_password):
    #userid = RegisterNewUser(domain_name)
    login_status = PostmasterLogIn(domain_name, postmaster_password)
    Postmaster_InspectPage()
    #Postmaster_ApproveUser(userid)
    #Postmaster_DeleteUser(userid)
    Organization_CreateDept()
    Organization_CreateUser()
    Organization_ImportUser()

def NewOrganization_CreateDept():
    Postmaster_AccessOrgnizationMenu()
    Waits.Wait10s_ElementLoaded("//*[@id='main-container']/div[2]/div/div/div[2]/div/div/div[1]/ou-dropdown-departments/div/div[1]/div/div/a/i")
    Commands.ClickElement("//*[@id='main-container']/div[2]/div/div/div[2]/div/div/div[1]/ou-dropdown-departments/div/div[1]/div/div/a/i")
    Logging("Click plus button in org tree") 

    Waits.Wait10s_ElementLoaded("//a[@ng-click='writeDepartment()']")
    Commands.ClickElement("//a[@ng-click='writeDepartment()']")
    Logging("Click Add dept button")

    Waits.Wait10s_ElementLoaded("//input[@ng-model='dept.name']")

    x = str(random.randint(1, 10000))
    dept_name = "Deparment" + x
    dept_id = "department" + x

    Commands.InputElement("//input[@ng-model='dept.name']", dept_name)
    Logging("Input department name")

    Commands.InputElement("//input[@ng-model='dept.groupmail']", dept_id)
    Logging("Input department id")

    time.sleep(1)

    Commands.ClickElement("//i[contains(@class, 'fa-save')]/parent::button[@ng-click='confirm()']")
    Logging("Click Save button")

    try:
        Waits.Wait10s_ElementLoaded("//li[@class='dynatree-lastsib']/span/a[contains(., '%s')]" % dept_name)
        TestCase_LogResult(**data["testcase_result"]["postmaster"]["add_dept"]["pass"])
    except WebDriverException:
        TestCase_LogResult(**data["testcase_result"]["postmaster"]["add_dept"]["fail"])
        dept_name = None
    
    Waits.WaitUntilPageIsLoaded(page_xpath=None)

    return dept_name

def NewOrganization_CreateUser(new_dept):
    Postmaster_AccessOrgnizationMenu()
    list1 = ValidateListTotal(list_footer="//div[contains(@class, 'message-footer')]/div[contains(@class, 'pull-left')]")
    if bool(new_dept) == True:
        target_dept = new_dept
        Commands.ClickElement("//a[contains(., '" + target_dept + "')]")
        Logging("Select dept to add user")
    else:
        try:
            select_dept = driver.find_element_by_xpath("//li[@class='dynatree-lastsib']/ul/li[@class='dynatree-lastsib']/span/a")
        except WebDriverException:
            select_dept = driver.find_element_by_xpath("//li[@class='dynatree-lastsib']/span/a")
        finally:
            selected_dept_name = select_dept.text
            target_dept = selected_dept_name
            select_dept.click()
            Logging("Select existing dept to add new user")
    i=0
    for i in range(1,10):
        i+=1
        list2 = ValidateListTotal(list_footer="//div[contains(@class, 'message-footer')]/div[contains(@class, 'pull-left')]")
        time.sleep(1)
        if list2 != list1:
            page_load = True
            break
        else:
            page_load = False
    
    Waits.WaitUntilPageIsLoaded(page_xpath=None)

    if page_load == True:
        Commands.ClickElement("//button[@data-ng-click='writeUser()']")
        Logging("Click add user button")

        Waits.WaitUntilPageIsLoaded(page_xpath="//input[@ng-model='user.userInfo.id']")

        y = str(random.randint(1, 1000000000))
        user_id = "user" + y
        Commands.InputElement("//input[@ng-model='user.userInfo.id']", user_id)
        id_input = Functions.GetInputValue("//input[@ng-model='user.userInfo.id']")
        Logging("Input user id")

        Commands.ClickElement("//button[@ng-click='validateUserID()']")
        Logging("Click Check ID button")
        
        try:
            Waits.Wait10s_ElementLoaded("//span[contains(@class, 'ou-alert-success')]")
            Logging("User id is available")
            user_id = True
        except WebDriverException:
            user_id = False
            Logging("User id is not valid")

        if bool(user_id) == False:
            Commands.ClickElement("//button[@ng-click='createUser($event)']/following-sibling::button[@ng-click='closeModal($event)']")
            Logging("--> Close modal")
        else:
            user_pw = id_input + "1!"
            Commands.InputElement("//input[@ng-model='user.userInfo.passwd']", user_pw)
            Logging("Input user password")

            time.sleep(1)

            user_name = "User " + y
            Commands.InputElement("//input[@ng-model='user.userInfo.name']", user_name)
            Logging("Input user name")

            Commands.ClickElement("//dept-user-organization/div/a/div/span")
            Logging("Open dept user org tree")

            Waits.WaitUntilPageIsLoaded("//span[contains(@class, 'ou-alert-success')]")

            time.sleep(1)
            Commands.Wait10s_ClickElement("//div[@id='tree']/ul/li/span/a[contains(., '%s')]" % target_dept)
            Logging("Select dept")
            
            Waits.Wait10s_ElementLoaded("//a[@ng-click='activeDepartment(item)' and contains(., '%s')]" % target_dept)
            Commands.ClickElement("//button[@ng-click='confirmSelect()']")
            Logging("Confirm selected dept")

            Waits.Wait10s_ElementLoaded("//ul[contains(@class, 'dept-container')]/li/span[contains(., '%s')]" % target_dept)
            Logging("Dept is selected successfully")

            Commands.ClickElement("//button[@ng-click='createUser($event)']")
            Logging("Click Save button")
            
            try:
                Waits.Wait10s_ElementLoaded("//span[contains(., '%s')]" % user_name)
                TestCase_LogResult(**data["testcase_result"]["postmaster"]["add_user"]["pass"])
            except WebDriverException:
                TestCase_LogResult(**data["testcase_result"]["postmaster"]["add_user"]["fail"])

        Waits.WaitUntilPageIsLoaded(page_xpath=None)
    
    return user_name

def NewOrganization_ImportOrg():
    Postmaster_AccessOrgnizationMenu()
    Commands.ClickElement("//button[contains(@class, 'ic-dept')]")
    Logging("Click dropdown button")

    Waits.Wait10s_ElementLoaded("//button[contains(@class, 'ic-dept')]/parent::div[contains(@class, 'open')]")

    Commands.ClickElement("//a[@data-ng-click='importForm()']")
    Logging("Click import button")

    # store the object of Workbook class in a variable
    wrkbk = openpyxl.Workbook()
    # to create a new sheet
    sh = wrkbk.create_sheet("Details", 2)

    id_no = str(random.randint(1, 1000))
    user_id = "user_import" + id_no
    user_name = "User Import " + id_no

    # to set the value in row 2 and column 3
    sh.cell(row=1, column=1).value = "Dept."
    sh.cell(row=1, column=2).value = "ID"
    sh.cell(row=1, column=3).value = "Name"
    sh.cell(row=2, column=1).value = "Import Folder"
    sh.cell(row=2, column=2).value = user_id
    sh.cell(row=2, column=3).value = user_name

    wrkbk.sheetnames
    removed_sheet = wrkbk['Sheet']
    wrkbk.remove(removed_sheet)
    wrkbk.sheetnames

    # to save the workbook
    wrkbk.save(import_file)
    
    Commands.Wait10s_InputElement("//*[@id='file']", import_file)
    Waits.Wait10s_ElementLoaded("//*[@id='importTable']")
    Commands.ClickElement(data["postmaster"]["save_import"])
    Waits.Wait10s_ElementLoaded(data["postmaster"]["progress_title"])

    try:
        Waits.Wait10s_ElementLoaded(data["postmaster"]["progress_percent"])
        time.sleep(1)
        driver.find_element_by_xpath(data["postmaster"]["success_modal"])
        TestCase_LogResult(**data["testcase_result"]["postmaster"]["import_user"]["pass"])
    except WebDriverException:
        TestCase_LogResult(**data["testcase_result"]["postmaster"]["import_user"]["fail"])

    Commands.ClickElement(data["postmaster"]["close_confirm"])
    Waits.Wait10s_ElementLoaded("//*[@id='dept_org']")

    Commands.ClickElement("//button[@data-ng-click='reloadPage()']")
    Logging("Click Reload page button")

    Waits.Wait10s_ElementLoaded("//div[contains(@class, 'block-ui hide')]")
    time.sleep(1)

    try:
        import_folder = driver.find_element_by_xpath("//a[contains(., 'Import Folder')]")
        Logging("New Import Dept is displayed in org tree" + testcase_pass)
    except WebDriverException:
        Logging("Cannot find new import dept in org tree" + testcase_fail)
        TestCase_LogResult(**data["testcase_result"]["postmaster"]["import_user"]["fail"])

    try:
        time.sleep(1)
        import_folder.click()
        Waits.Wait10s_ElementLoaded("//td[contains(., '%s')]" % user_name)
        Logging("New import user is displayed in org tree", testcase_pass)
    except WebDriverException:
        Logging("Cannot find new import user in org tree", testcase_fail)
        TestCase_LogResult(**data["testcase_result"]["postmaster"]["import_user"]["fail"])

    return user_name

def NewOrganization_DeleteUser(target_dept, target_user):
    try:
        Commands.ClickElement("//div[@id='dept_org']/ul/li/span/a[contains(., '%s')]" % target_dept)
    except WebDriverException:
        Commands.ClickElement("//div[@id='dept_org']/ul/li/ul/li/span/a[contains(., '%s')]" % target_dept)
    finally:
        Logging("Click select dept")

    try:
        Waits.WaitElementLoaded(5, "//span[contains(., '%s')]/parent::td/following-sibling::td/button[contains(@ng-click, 'removeUser')]" % target_user)
        Commands.ClickElement("//span[contains(., '%s')]/parent::td/following-sibling::td/button[contains(@ng-click, 'removeUser')]" % target_user)
        Logging("Click delete user: " + target_user)
        delete_user = True
    except WebDriverException:
        delete_user = False
        Logging("Cannot find user to delete")
    
    if delete_user == True:
        try:
            Commands.Wait10s_ClickElement("//button[@ng-click='removeUserDelete()']")
            Logging("Click delete button")

            Commands.Wait10s_ClickElement("//button[@ng-click='delete()']")
            Logging("Confirm delete user")
            
            Waits.Wait10s_ElementLoaded("//td[contains(., 'No data')]")
            Logging("User is deleted successfully")
            Logging(testcase_pass)
        except WebDriverException:
            Logging("Fail to click delete user")
            Logging(testcase_fail)

def NewOrganization_DeleteDept(target_dept):
    try:
        Waits.WaitElementLoaded(5, "//a[contains(., '%s')]" % target_dept)
        delete_dept = True
    except WebDriverException:
        delete_dept = False
    
    if delete_dept == True:
        target_dept_xpath_1 = "//div[@id='dept_org']/ul/li/span/a[contains(., '%s')]" % target_dept
        target_dept_xpath_2 = "//div[@id='dept_org']/ul/li/ul/li/span/a[contains(., '%s')]" % target_dept
        
        try:
            target_dept = Commands.ClickElement(target_dept_xpath_1)
        except WebDriverException:
            target_dept = Commands.ClickElement(target_dept_xpath_2)
        finally:
            Logging("Click select dept")

        try:
            Commands.Wait10s_ClickElement("//button[@ng-click='deleteDepartment()']")
            Logging("Click delete dept")

            Commands.Wait10s_ClickElement("//div[contains(@class, 'modal-footer')]/button[@data-ng-click='ok()']")
            Logging("Confirm delete user")

            Commands.Wait10s_ClickElement("//div[contains(., 'Data deleted successfully.')]/following-sibling::div/button[@data-ng-click='cancel(false)']")
            Logging("Dept is deleted successfully", testcase_pass)
            time.sleep(1)
        except WebDriverException:
            Logging("Fail to click delete dept")
            Logging(testcase_fail)

def NewOrganization_Execution(domain_name, postmaster_password):
    PostmasterLogIn(domain_name, postmaster_password)
    #Postmaster_InspectPage()
    time.sleep(10)
    new_dept = NewOrganization_CreateDept()
    new_user_name = NewOrganization_CreateUser(new_dept)
    NewOrganization_DeleteUser(target_dept=new_dept, target_user=new_user_name)
    NewOrganization_DeleteDept(target_dept=new_dept)
    user_import_name = NewOrganization_ImportOrg()
    NewOrganization_DeleteUser(target_dept="Import Folder", target_user=user_import_name)
    NewOrganization_DeleteDept(target_dept="Import Folder")

#PostmasterExecution("http://qavn.hanbiro.net/ngw/app/#", "$Bhngk6@")
#PostmasterExecution("http://groupware57.hanbiro.net/ngw/app/#", "xZAc?ZzF}wzXp6N")
#PostmasterExecution_Debug("http://gw.hanbirolinux.tk/ngw/app/#", "gksqlfhxptmxm1!")
#NewOrganization_Execution("http://groupware57.hanbiro.net/ngw/app/#", "$Bhngk6@")
#NewOrganization_Execution("http://qavn.hanbiro.net/ngw/app/#", "$Bhngk6@")

#NewOrganization_Execution("https://tg01.hanbiro.net/ngw/app/#", "o&YHK_+TJo?MtX&")
#NewOrganization_Execution("http://qavn.hanbiro.net/ngw/app/#", "$Bhngk6@")

end_time = time.time()
print(end_time - start_time)